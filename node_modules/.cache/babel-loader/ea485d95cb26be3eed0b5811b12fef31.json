{"ast":null,"code":"var _jsxFileName = \"/Users/Shared/Previously Relocated Items/Security/work /\\u524D\\u7AEF/web projects/github-finder/src/context/github/GithubState.js\",\n    _s = $RefreshSig$();\n\nimport React, { useReducer } from 'react';\nimport axios from 'axios';\nimport GithubContext from './GithubContext';\nimport GithubReducer from './GithubReducer';\nimport { SEARCH_USERS, SET_LOADING, CLEAR_USERS, GET_USER, GET_REPOS } from '../types';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet githubClientId;\nlet githubClientSecret;\n\nif (process.env.NODE_ENV !== 'production') {\n  githubClientId = process.env.REACT_APP_GITHUB_CLIENT_ID;\n  githubClientSecret = process.env.REACT_APP_GITHUB_CLIENT_SECRET;\n} else {\n  githubClientId = process.env.GITHUB_CLIENT_ID;\n  githubClientSecret = process.env.GITHUB_CLIENT_SECRET;\n}\n\nconst GithubState = props => {\n  _s();\n\n  const initialState = {\n    users: [],\n    user: {},\n    repos: [],\n    loading: false\n  };\n  const [state, dispatch] = useReducer(GithubReducer, initialState); //Search Users\n\n  const searchUsers = async text => {\n    setLoading();\n    const res = await axios.get(`https://api.github.com/search/users?q=${text}&client_id=$\n        {githubClientId}&client_secret=$\n        {githubClientSecret}`);\n    dispatch({\n      type: SEARCH_USERS,\n      payload: res.data.items\n    });\n  }; //Get User\n\n\n  const getUser = async username => {\n    setLoading();\n    const res = await axios.get(`https://api.github.com/users/${username}?client_id=$\n        {githubClientId}&client_secret=$\n        {githubClientSecret}`);\n    dispatch({\n      type: GET_USER,\n      payload: res.data\n    });\n  }; //Get Repos\n\n\n  const getUserRepos = async username => {\n    setLoading();\n    const res = await axios.get(`https://api.github.com/users/${username}/repos?per_page=5&sort=created:asc&client_id=$\n            {githubClientId}&client_secret=${githubClientSecret}`); //res.data for the single user\n\n    dispatch({\n      type: GET_REPOS,\n      payload: res.data\n    });\n  }; //Clear Users\n\n\n  const clearUsers = () => dispatch({\n    type: CLEAR_USERS\n  }); //set Loading\n\n\n  const setLoading = () => dispatch({\n    type: SET_LOADING\n  }); //use provider to pass the state that whole App can use.\n\n\n  return /*#__PURE__*/_jsxDEV(GithubContext.Provider, {\n    value: {\n      users: state.users,\n      user: state.user,\n      repos: state.repos,\n      loading: state.loading,\n      searchUsers,\n      clearUsers,\n      getUser,\n      getUserRepos\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 16\n  }, this);\n};\n\n_s(GithubState, \"6JWkGZ32UPfojeNx+xqn8ZU8A0Q=\");\n\n_c = GithubState;\nexport default GithubState;\n\nvar _c;\n\n$RefreshReg$(_c, \"GithubState\");","map":{"version":3,"sources":["/Users/Shared/Previously Relocated Items/Security/work /前端/web projects/github-finder/src/context/github/GithubState.js"],"names":["React","useReducer","axios","GithubContext","GithubReducer","SEARCH_USERS","SET_LOADING","CLEAR_USERS","GET_USER","GET_REPOS","githubClientId","githubClientSecret","process","env","NODE_ENV","REACT_APP_GITHUB_CLIENT_ID","REACT_APP_GITHUB_CLIENT_SECRET","GITHUB_CLIENT_ID","GITHUB_CLIENT_SECRET","GithubState","props","initialState","users","user","repos","loading","state","dispatch","searchUsers","text","setLoading","res","get","type","payload","data","items","getUser","username","getUserRepos","clearUsers","children"],"mappings":"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","sourcesContent":["import React, {useReducer} from 'react';\nimport axios from 'axios';\nimport GithubContext from './GithubContext';\nimport GithubReducer from './GithubReducer';\nimport {\n    SEARCH_USERS,\n    SET_LOADING,\n    CLEAR_USERS,\n    GET_USER,\n    GET_REPOS\n} from '../types'\n\nlet githubClientId;\nlet githubClientSecret;\n\nif(process.env.NODE_ENV !== 'production'){\n    githubClientId = process.env.REACT_APP_GITHUB_CLIENT_ID;\n    githubClientSecret = process.env.REACT_APP_GITHUB_CLIENT_SECRET;\n}else{\n    githubClientId = process.env.GITHUB_CLIENT_ID;\n    githubClientSecret = process.env.GITHUB_CLIENT_SECRET;\n}\n\nconst GithubState = (props) => {\n    const initialState = {\n        users: [],\n        user: {},\n        repos: [],\n        loading: false\n    }\n    const [state, dispatch] = useReducer(GithubReducer, initialState);\n\n    //Search Users\n    const searchUsers = async text=>{\n        setLoading();\n\n        const res = await axios.get(\n        `https://api.github.com/search/users?q=${text}&client_id=$\n        {githubClientId}&client_secret=$\n        {githubClientSecret}`);\n        \n        dispatch({\n            type: SEARCH_USERS,\n            payload: res.data.items\n        });\n        }\n\n    //Get User\n        const getUser = async (username) =>{\n        setLoading();\n        const res = await axios.get(`https://api.github.com/users/${username}?client_id=$\n        {githubClientId}&client_secret=$\n        {githubClientSecret}`);\n        \n        dispatch({\n            type:GET_USER,\n            payload: res.data\n        })\n    }\n    //Get Repos\n        const getUserRepos = async (username) =>{\n            \n            setLoading()\n            const res = await axios.get(`https://api.github.com/users/${username}/repos?per_page=5&sort=created:asc&client_id=$\n            {githubClientId}&client_secret=${githubClientSecret}`);\n            //res.data for the single user\n            \n            dispatch({\n                type: GET_REPOS,\n                payload: res.data\n            })\n         }\n\n        //Clear Users\n        const clearUsers = () => dispatch({type: CLEAR_USERS})\n\n        //set Loading\n        const setLoading = () => dispatch({type: SET_LOADING})\n        \n        //use provider to pass the state that whole App can use.\n        return <GithubContext.Provider\n            value = {{\n                users:state.users,\n                user: state.user,\n                repos: state.repos,\n                loading: state.loading,\n                searchUsers,\n                clearUsers,\n                getUser,\n                getUserRepos\n            }}>{props.children}</GithubContext.Provider>\n}\n\nexport default GithubState;"]},"metadata":{},"sourceType":"module"}